datasource db {
  url      = env("DATABASE_URL")
  provider = "postgresql"
}

generator client {
  provider = "prisma-client-js"
}

enum Role {
  ADMIN
  EDITOR
  USER
}

// model User {
//   id                           Int                            @id @default(autoincrement())
//   username                     String
//   password                     String?
//   email                        String
//   displayName                  String?
//   avatar                       String?
//   rating                       Int                            @default(0)
//   role                         Role                           @default(USER)
//   firstSpeakerJoinRequests     TournamentJoinRequest[]        @relation("firstSpeakerJoinRequests")
//   secondSpeakerJoinRequests    TournamentJoinRequest[]        @relation("secondSpeakerJoinRequests")
//   firstSpeakerTournamentTeams  TournamentTeam[]               @relation("firstSpeakerTournamentTeams")
//   secondSpeakerTournamentTeams TournamentTeam[]               @relation("secondSpeakerTournamentTeams")
//   tournamentJudges             TournamentJudge[]
//   tournamentUserSpeakerPoints  TournamentUserSpeakerPoint[]
//   teamInvitationInvited        UserTournamentTeamInvitation[] @relation("teamInvitationInvited")
//   teamInvitationReceived       UserTournamentTeamInvitation[] @relation("teamInvitationReceived")
// }

model Tournament {
  id                Int                          @id @default(autoincrement())
  title             String
  description       String
  icon              String?
  location          String
  ownerId           Int
  isApproved        Boolean                      @default(false)
  startDate         DateTime                     @default(now())
  endDate           DateTime
  createdAt         DateTime                     @default(now())
  updatedAt         DateTime                     @default(now())
  joinRequests      TournamentJoinRequest[]
  teams             TournamentTeam[]
  judges            TournamentJudge[]
  userSpeakerPoints TournamentUserSpeakerPoint[]
  judgePoints       TournamentJudgePoint[]
  rooms             TournamentRoom[]
}

model TournamentJoinRequest {
  id              Int        @id @default(autoincrement())
  // firstSpeaker    User       @relation(fields: [firstSpeakerId], references: [id], name: "firstSpeakerJoinRequests")
  firstSpeakerId  String
  // secondSpeaker   User       @relation(fields: [secondSpeakerId], references: [id], name: "secondSpeakerJoinRequests")
  secondSpeakerId String
  tournament      Tournament @relation(fields: [tournamentId], references: [id])
  tournamentId    Int
  teamTitle       String
  isApproved      Boolean    @default(false)
  createdAt       Boolean    @default(false)
  updatedAt       Boolean    @default(false)
}

model TournamentTeam {
  id                  Int                  @id @default(autoincrement())
  title               String
  // firstSpeaker       User                 @relation(fields: [firstSpeakerId], references: [id], name: "firstSpeakerTournamentTeams")
  firstSpeakerId      String
  // secondSpeaker      User                 @relation(fields: [secondSpeakerId], references: [id], name: "secondSpeakerTournamentTeams")
  secondSpeakerId     String
  tournament          Tournament           @relation(fields: [tournamentId], references: [id])
  tournamentId        Int
  createdAt           DateTime             @default(now())
  updatedAt           DateTime             @default(now())
  tournamentRoomTeams TournamentRoomTeam[]
}

model TournamentJudge {
  id           Int        @id @default(autoincrement())
  // judge        User       @relation(fields: [judgeId], references: [id])
  judgeId      String
  tournament   Tournament @relation(fields: [tournamentId], references: [id])
  tournamentId Int
  isMain       Boolean    @default(false)
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @default(now())
}

model TournamentUserSpeakerPoint {
  id            Int        @id @default(autoincrement())
  // user          User       @relation(fields: [userId], references: [id])
  userId        String
  tournament    Tournament @relation(fields: [tournamentId], references: [id])
  tournamentId  Int
  speakerPoints Int
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @default(now())
}

model TournamentJudgePoint {
  id           Int        @id @default(autoincrement())
  judgeId      String
  tournament   Tournament @relation(fields: [tournamentId], references: [id])
  tournamentId Int
  points       Int
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @default(now())
}

model TournamentRound {
  id          Int                    @id @default(autoincrement())
  round       Int
  resolution  String
  isClosed    Boolean                @default(false)
  createdAt   DateTime               @default(now())
  updatedAt   DateTime               @default(now())
  roundPoints TournamentRoundPoint[]
}

model TournamentRoundPoint {
  id        Int             @id @default(autoincrement())
  round     TournamentRound @relation(fields: [roundId], references: [id])
  roundId   Int
  points    Int
  createdAt DateTime        @default(now())
  updatedAt DateTime        @default(now())
}

model TournamentRoom {
  id           Int                  @id @default(autoincrement())
  tournament   Tournament           @relation(fields: [tournamentId], references: [id])
  tournamentId Int
  judgeId      String
  room         Int
  roomTeams    TournamentRoomTeam[]
  createdAt    DateTime             @default(now())
  updatedAt    DateTime             @default(now())
}

enum TournamentRoomPosition {
  OPENING_GOVERNMENT
  CLOSING_GOVERNMENT
  OPENING_OPPOSITION
  CLOSING_OPPOSITION
}

model TournamentRoomTeam {
  id        Int                    @id @default(autoincrement())
  team      TournamentTeam         @relation(fields: [teamId], references: [id])
  teamId    Int
  roomId    Int
  room      TournamentRoom         @relation(fields: [roomId], references: [id])
  position  TournamentRoomPosition
  createdAt DateTime               @default(now())
  updatedAt DateTime               @default(now())
}

model UserTournamentTeamInvitation {
  id         Int      @id @default(autoincrement())
  // inviter    User     @relation(fields: [inviterId], references: [id], name: "teamInvitationInvited")
  inviterId  String
  // receiver   User     @relation(fields: [receiverId], references: [id], name: "teamInvitationReceived")
  receiverId String
  isAccepted Boolean  @default(false)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @default(now())
}
